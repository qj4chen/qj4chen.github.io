I"8<h1 id="tutorial-on-embedding-data-visualization-into-html">tutorial-on-embedding-data-visualization-into-html</h1>
<blockquote>
  <p>EXCLUSIVE. For my beautiful and cute wife only.</p>
</blockquote>

<p>this tutorial aims to finish THREE popular tasks concerning data analysis, data visualization and combining it into html file, a.k.a for the purpose of using the analysis elsewhere other than local computer</p>

<h1 id="step-1-data-analysis">Step 1: data analysis</h1>
<h2 id="11-fecth-data">1.1 fecth data</h2>
<p>Since my wife is interested in financial area and curious about plotting beatiful and interactive k-lines, this tutorial will focus on build plot of such kind.</p>

<p>To fetch the data we want to plot with, we need to install a popular python package named <a href="https://tushare.pro/register"><code class="language-plaintext highlighter-rouge">tushare</code></a> and sign up for a particular token which will be passed into the code for data fetching.</p>

<p>Use your account to log into the <a href="https://tushare.pro/">site</a> for further steps. Meanwhile, open a prompt / powershell window, and install <code class="language-plaintext highlighter-rouge">tushare</code> package simply by typing <code class="language-plaintext highlighter-rouge">pip install tushare</code>, and then downloading and installing process will automatically start.</p>

<p>After log in to the <code class="language-plaintext highlighter-rouge">tushare</code> site, you need to navigate to the user center and find below the <code class="language-plaintext highlighter-rouge">接口Token</code> panel and copy your token.</p>

<p><img src="img/kline_using_plotly_easy/tushare_token.png" alt="Screen shot of `tushare` user center" /></p>

<p>With the token you just found, you are now able to request data from  <code class="language-plaintext highlighter-rouge">tushare</code> using the user-friendly api provided by them. You may not be familiar with what api is, but all you need to know about it is api is the first approach you should try if you want to fetch from a data source, and if it is not available, then other approached may be considered such as web crawler and manually downloading.</p>

<p>Below is the data fetching part of the code, quite simple. You could refer to the <code class="language-plaintext highlighter-rouge">tushare</code> <a href="https://waditu.com/document/2?doc_id=27">website</a> for more information about the basic usage of the <code class="language-plaintext highlighter-rouge">tushare.pro_api</code> function.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">tushare</span> <span class="k">as</span> <span class="n">ts</span>
<span class="n">token</span> <span class="o">=</span> <span class="s">'which you need to replace with your own token'</span>
<span class="n">pro</span> <span class="o">=</span> <span class="n">ts</span><span class="p">.</span><span class="n">pro_api</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pro</span><span class="p">.</span><span class="n">daily</span><span class="p">(</span><span class="n">ts_code</span><span class="o">=</span><span class="s">'600519.SH'</span><span class="p">,</span> <span class="n">start_date</span><span class="o">=</span><span class="s">'20000101'</span><span class="p">,</span> <span class="n">end_date</span><span class="o">=</span><span class="mi">20211027</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p>BTW, I love this magic liquid gold and I definitely will hold some stock of 600519.SH someday if I could afford to.</p>
</blockquote>

<p>You may notice that <code class="language-plaintext highlighter-rouge">pro.daily</code> function returns a dataframe (here it is named as <code class="language-plaintext highlighter-rouge">df</code>). So, we could investigate some of its attributes and data structure of this dataframe. Like showing all of the columns contained in the dataframe</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">columns</span><span class="p">)</span>
<span class="c1"># Index(['ts_code', 'trade_date', 'open', 'high', 'low', 'close', 'pre_close','change', 'pct_chg', 'vol', 'amount'],dtype='object')
</span></code></pre></div></div>

<p>or the first rows of the Excel-like dataset</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">head</span><span class="p">())</span>
<span class="s">'''
     ts_code trade_date     open  ...  pct_chg       vol       amount
0  600519.SH   20211027  1852.30  ...  -2.2595  34647.29  6302270.905
1  600519.SH   20211026  1864.03  ...  -0.6396  21130.26  3934223.714
2  600519.SH   20211025  1880.00  ...  -1.4713  32461.33  6076219.948
3  600519.SH   20211022  1855.00  ...   3.0911  35962.60  6794850.056
4  600519.SH   20211021  1841.10  ...   0.1630  23018.70  4238584.294
'''</span>
</code></pre></div></div>

<h2 id="12-preprocess-the-dataset">1.2 preprocess the dataset</h2>
<p>Now we are moving on. A simple convention for a dataframe containing an unique timestamp at each row is to use the timestamp as its index. And we noticed that the original data return by <code class="language-plaintext highlighter-rouge">tushare</code> contains a column named <code class="language-plaintext highlighter-rouge">trade_date</code> BUT it is not well parsed so it is not recognized as a column of timestamp by now. Moreover, the timestamps are not sorted increasingly, as we noticed the most recent dates are shown at the top rows. Based on the mentioned, we will use <code class="language-plaintext highlighter-rouge">trade_date</code> as the index of the datafram and convert the new index into the datatime format using <code class="language-plaintext highlighter-rouge">pandas.to_datetime</code> function and then we sort the index. Nice! The dataset is ready for plot</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="n">df</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s">'trade_date'</span><span class="p">]</span>
<span class="n">df</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">index</span><span class="p">)</span>
<span class="n">df</span><span class="p">.</span><span class="n">sort_index</span><span class="p">(</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="step-2-plot-with-plotly">Step 2: Plot with <code class="language-plaintext highlighter-rouge">Plotly</code></h1>
<p>Plotly is a powerful tool producing interactive charts, and without question it has its python package. Install this package by typing <code class="language-plaintext highlighter-rouge">pip install plotly</code> into your terminal or shell.</p>

<h1 id="21-produce-a-plot">2.1 produce a plot</h1>
<p>Don’t be freaked out by the code since it only contains the assignment to the varible <code class="language-plaintext highlighter-rouge">fig</code> and then <code class="language-plaintext highlighter-rouge">fig</code> is called by <code class="language-plaintext highlighter-rouge">fig.show()</code>. If you are lucky, then the default browser on your computer will automatically render a new tab for your plot. If you are not lucky, well, my wife can turn to me but you may turn to <code class="language-plaintext highlighter-rouge">stackoverflow</code> or <code class="language-plaintext highlighter-rouge">CSDN</code></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">plotly.graph_objects</span> <span class="k">as</span> <span class="n">go</span>

<span class="n">fig</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">Figure</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="p">[</span>
    <span class="n">go</span><span class="p">.</span><span class="n">Candlestick</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">df</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">"%Y/%m/%d"</span><span class="p">),</span>
                   <span class="nb">open</span><span class="o">=</span><span class="n">df</span><span class="p">.</span><span class="nb">open</span><span class="p">,</span>
                   <span class="n">high</span><span class="o">=</span><span class="n">df</span><span class="p">.</span><span class="n">high</span><span class="p">,</span>
                   <span class="n">low</span><span class="o">=</span><span class="n">df</span><span class="p">.</span><span class="n">low</span><span class="p">,</span>
                   <span class="n">close</span><span class="o">=</span><span class="n">df</span><span class="p">.</span><span class="n">close</span><span class="p">,</span>
                   <span class="n">increasing</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">line_color</span><span class="o">=</span><span class="s">'red'</span><span class="p">),</span>
                   <span class="n">decreasing</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">line_color</span><span class="o">=</span><span class="s">'green'</span><span class="p">)</span>
                   <span class="p">)</span>
<span class="p">])</span>

<span class="n">fig</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>
<p>You may have discovered that k-lines is acually a candlestick plot using <code class="language-plaintext highlighter-rouge">open price</code>, <code class="language-plaintext highlighter-rouge">high price</code>, <code class="language-plaintext highlighter-rouge">low price</code>, <code class="language-plaintext highlighter-rouge">close price</code> and the candle stick is composed as the picture below.
<img src="../img/kline_using_plotly_easy/candlestick.png" alt="picture" /></p>
<h1 id="22-save-the-plot-as-a-html-file">2.2 save the plot as a html file</h1>
<p>After we need to export the plot into a html file so that we could embed it elsewhere. Simply use the following code:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">.</span><span class="n">write_html</span><span class="p">(</span><span class="s">'sample_plot.html'</span><span class="p">)</span>
</code></pre></div></div>
<p>and a file named <code class="language-plaintext highlighter-rouge">sample_plot.html</code> will be saved at the parallel path to the python code file you are using.</p>

<h1 id="step-3-use-the-plot-at-a-html">Step 3: use the plot at a html.</h1>
<p>We know that construct a beautiful webpage requires lots of work. And for the occasions we only want to exhibit some text and pictures, <code class="language-plaintext highlighter-rouge">MS Word</code> is the first option.</p>

<p>We create a simple word document as shown in the picture below</p>

<p><img src="../img/kline_using_plotly_easy/word.png" alt="pic" /></p>

<p>We then save the file as a html file by clicking <code class="language-plaintext highlighter-rouge">文件-另存为</code>, and select the file type as illustrated.</p>

<p><img src="../img/kline_using_plotly_easy/word_save_as.png" alt="pic" /></p>

<p>And then use a text editor software to modify the doc, here we use <code class="language-plaintext highlighter-rouge">Visual Studio Code</code> for demonstration.</p>

<p>We navigate the position we want to insert the plot.</p>

<p><img src="../img/kline_using_plotly_easy/html_code.png" alt="pic" /></p>

<p>And we delete the text block and add the following code.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;iframe</span> <span class="na">scrolling=</span><span class="s">"no"</span> <span class="na">style=</span><span class="s">"border:none;"</span> <span class="na">seamless=</span><span class="s">"seamless"</span> 
<span class="na">src=</span><span class="s">"https://qj4chen.github.io/sample_plot/"</span> 
<span class="na">height=</span><span class="s">"500"</span> <span class="na">width=</span><span class="s">"100%"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/iframe&gt;</span>
</code></pre></div></div>
<p>And pay attention to the source here <code class="language-plaintext highlighter-rouge">src="https://qj4chen.github.io/sample_plot/" </code>. It means you need to create a github repository named <code class="language-plaintext highlighter-rouge">sample_plot</code> to host the page.</p>

<p>Then again, if you have question about this, feel free to consult to the web for solution. But if you are my wife, please ask me any time and I will fix it to you. Nevertheless, this <a href="https://blog.imfing.com/2021/04/html-webpage-embed-plotly/">post</a> may be helpful.</p>

<h1 id="finally">Finally</h1>
<p>Thanks to <code class="language-plaintext highlighter-rouge">plotly</code> and <code class="language-plaintext highlighter-rouge">Github</code>, we can now render our analysis to the Magic Liquid Gold in China vividly in our browser.
<img src="../img/kline_using_plotly_easy/last.png" alt="pic" /></p>

:ET